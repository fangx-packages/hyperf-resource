<?php
declare(strict_types=1);

namespace Fangx\Tests\Stubs;

use Closure;
use FastRoute\Dispatcher;
use Google\Protobuf\Internal\Message;
use Hyperf\GrpcServer\CoreMiddleware;
use Hyperf\HttpServer\Router\Dispatched;
use Hyperf\Server\Exception\ServerException;
use Hyperf\Utils\Context;
use Psr\Http\Message\ResponseInterface;
use Psr\Http\Message\ServerRequestInterface;
use Psr\Http\Server\RequestHandlerInterface;

class GrpcCoreMiddlewareProxy extends CoreMiddleware
{
    public function process(ServerRequestInterface $request, RequestHandlerInterface $handler): ResponseInterface
    {
        $request = Context::set(ServerRequestInterface::class, $request);

        /** @var Dispatched $dispatched */
        $dispatched = $request->getAttribute(Dispatched::class);

        if (!$dispatched instanceof Dispatched) {
            throw new ServerException(sprintf('The dispatched object is not a %s object.', Dispatched::class));
        }

        switch ($dispatched->status) {
            case Dispatcher::FOUND:
                return $this->handleFound($dispatched, $request);
            default:
                return parent::process($request, $handler); // TODO: Change the autogenerated stub
        }
    }

    protected function handleFound(Dispatched $dispatched, ServerRequestInterface $request)
    {
        if ($dispatched->handler->callback instanceof Closure) {
            $parameters = $this->parseClosureParameters($dispatched->handler->callback, $dispatched->params);
            $result = call($dispatched->handler->callback, $parameters);
        } else {
            [$controller, $action] = $this->prepareHandler($dispatched->handler->callback);
            $controllerInstance = $this->container->get($controller);
            if (!method_exists($controller, $action)) {
                $grpcMessage = 'Action not exist.';
                return $this->handleResponse(null, 500, '500', $grpcMessage);
            }
            $parameters = $this->parseParameters($controller, $action, $dispatched->params);
            $result = $controllerInstance->{$action}(...$parameters);
        }

        if (!$result instanceof Message) {
            $grpcMessage = 'The result is not a valid message.';
            return $this->handleResponse(null, 500, '500', $grpcMessage);
        }

        return $this->handleResponse($result, 200);
    }
}
